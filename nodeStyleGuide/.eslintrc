{
    
    "env": {
        "node":true
    },
    "rules": {
    //Single quotes
        "quotes": [
            2,
            "single"
        ],
        // Dissallow Semi colons
        "semi": [
            2,
            "never"
        ],
        // 2-Space Indentation
        "indent": [
            2,
            2
        ],
        // Require Curly braces for all control statements
         "curly": 2,
         // Allow Only camel case. All caps Considered as consants
         "camelcase": [
            2, 
            {
                "properties": "always"
            }
         ],
         // Capture nested context of this in self
         "consistent-this": [
            2, 
            "self"
         ],
         // Require Capital lette for constructors
         new-cap: 2,
         // Comma at end of sentence
         "comma-style": [
            2, 
            "last"
         ],
         // Use Operators before line starts.
        "operator-linebreak": [
            2, 
            "after"
        ],
        // No TODO, FIXME.
        "no-warning-comments": [
            2, 
            { 
                "terms": [
                    "todo", 
                    "fixme"
                    ], 
                    "location": "anywhere" 
            }
        ],
        // Max nested callbacks 3.
        "max-nested-callbacks": [
            2, 
            3
        ],
        // First argument of callback should be err.
        "handle-callback-err": [
            2, 
            "err"
        ],
        //Space betweend function and argument brackets.
        space-before-function-paren: [
            2,
            {
                "anonymous": "always", 
                "named": "always"
            }
        ],
        "space-in-brackets": [
            2, 
            "never"
        ],
        "key-spacing": [
            2, 
            {
                "beforeColon": false,
                "afterColon": true
            }
        ],
        "no-trailing-spaces": [
            2,
            {
                "skipBlankLines": false
            }
        ],
        // Require shorthand operator assignment.
        "operator-assignment": [
            2, 
            "always"
        ],
        // Function should be defined as Expression
        "func-style": [
            2,
            "expression"
        ],
        "strict": [
            2,
            "global"
        ],
        no-underscore-dangle: [
            0
        ],
        no-shadow: 0
    },
    "ecmaFeatures": {
        "jsx": true
    }
}